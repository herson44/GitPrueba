?barplot()
q()
y=(1,2,3)
y=[1,2,3]
y=c.(1,2,3)
y=seq(from=4.5, to=9, by=0.5)
y
y*2
getwd
print getwd
y=getwd
y
R.version.string
install.packages("swirl")
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555)
c(z,555,z)
z*2+100
mySqrt = (z-1)^(1/2)
mySqrt<-sqrt(z-1)
mySqrt
myDiv<- z/mySqrt
myDiv
c(1,2,3,4)+c(0,10)
c(1,2,3,4) + c(0,10,100)
getwd
appl <- read.delim("~/appl.txt")
View(appl)
X<-1
X
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
getwd()
setwd(C:\Users\Herson\Desktop\Books\R  program\specdata\specdata)
setwd("C:\Users\Herson\Desktop\Books\R  program\specdata\specdata")
setwd("C:\Users\Herson\Desktop\Books\R  program\specdata\specdata")
rhenso44 <- "this is my assignment"
rhenso44
source("run_analysis.R")
install.package("markdown")
install.packages("markdown")
install.packages("knirt")
install.packages("knitr")
library(UsingR);data(galton)
installpackages("UsingR")
install.packages("UsingR")
library(UsingR); data(galton)
par(mfrow=c(1,2))
hist(galton$child, col="blue",breaks = 100)
hist(galton$parent, col="blue",breaks = 100)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
cor(x,w)
library(manipulate)
y=x*w
y
myHist <- function(mu){
hist(y,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((y - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
data(mtcars)
names(mtcars)
View(mtcars)
lm(mpg ~ wt)
lm(mtcars$mpg ~ mtcars$wt)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
meanx <_ mean(x)
meanx <- mean(x)
stdevx <- stdev(x)
sdx <- sd(x)
zx <- (x-meanx)/sdx
zx
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
lm(x ~ x)
m <- mtcars
fit1 <- lm(mpg~cyl+wt)
fit1 <- lm(m$mpg~m$cyl+m$wt)
summary(fit1)
fit2 <- lm(m$mpg~m$cyl)
summary(fit2)
fit2 <- lm(m$cyl~m$wt)
summary(fit2)
fit3 <- lm(m$cyl~m$cyl+m$c)
fit3 <- lm(m$mpg~m$cyl+m$wt+m$cyl*m$wt)
summary(fit3)
fit4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit4)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit5 <- lm(y~x)
lm.influence(fit5, do.coef = TRUE)
dfbeta(fit5, infl = lm.influence(fit5, do.coef = TRUE))
fit5 <- lm(y~x)
dfbetas(fit5)
library("MASS")
library("InsectSprays")
install.packazges("InsectSprays")
install.packages("InsectSprays")
install.packages("swirl")
library(swirl)
rm(list=list())
rm(list=ls())
library(swirl)
install_from_swirl("Statistical Inference")
ToothGrowth
}
g}
g <- g + geom_line(size = 2, aes(colour = dist))}
g <- g + geom_line(size = 2, aes(col = dist))}
library("manipulate")
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
?data.frame
right
a+error
a <- 1100
s <- 30
n <- 9
error <- qt(0.95,df=n-1)*s/sqrt(n)
a+error
a-error
error <- qt(0.95,df=n)*s/sqrt(n)
a-error
a+error
initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
slider
?slider
??slider
alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
)
manipulate(myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1, initial = 16),
alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
library(manipulate)
manipulate(myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1, initial = 16),
alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
library(manipulate)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mu0,
sd = sigma/sqrt(n)), size = 2, col = "red")
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mua,
sd = sigma/sqrt(n)), size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g}
manipulate(myplot(sigma, mua, n, alpha),sigma = slider(1, 10, step = 1, initial = 4),mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1, initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
import(ggplot)
library(ggplot)
?ggplot
??ggplot
import("ggplot2")
install.packages("ggplot2")
baseL <- c(140138150148135
install.packages("ggplot2")
140138150148135
baseL <- c(140,138,150,148,135)
2days <- c(132135151146130
2days <- c(132,135,151,146,130)
days2 <- c(132,135,151,146,130)
mean(baseL)
mean(days2)
sd(days2)
pnorm(mean(mean(days2)-mean(baseL),sd(days2))
s
rnorm(5, mean(days2)-mean(baseL),sd(days2))
pnorm(mean(days2)-mean(baseL),sd(days2))
power.t.test(n = 9, delta = 19, sd = 30, type = "one.sample", alt = "two.sided")$power
power.t.test(n = 9, delta = 23, sd = 30, type = "one.sample", alt = "two.sided")$power
power.t.test(n = 9, delta = 69, sd = 30, type = "one.sample", alt = "two.sided")$power
power.t.test(n = 9, delta = 33, sd = 30, type = "one.sample", alt = "two.sided")$power
power.t.test(n = 9, delta = 23, sd = 30, type = "one.sample", alt = "two.sided")$power
power.t.test(n = 9, delta = 23, sd = 69, type = "one.sample", alt = "two.sided")$power
power.t.test(n = 9, delta = 69, sd = 30, type = "one.sample", alt = "two.sided")$power
power.t.test(n = 9, delta = -4, sd = 1.5, type = "one.sample", alt = "one.sided")
power.t.test(n = 100, delta = 0.01, sd = 0.04, type = "one.sample", alt = "one.sided")
power.t.test(delta = 0.01, sd = 0.04, type = "one.sample", alt = "one.sided")
power.t.test(.90,delta = 0.01, sd = 0.04, type = "one.sample", alt = "one.sided")
power.t.test(power=.90,delta = 0.01, sd = 0.04, type = "one.sample", alt = "one.sided")
q()
library(AppliedPredictiveModeling)
install.packages(AppliedPredictiveModeling)
install.packages(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("Hmisc")
names(training)
library(ggplot2)
qplot(Cement,FlyAsh, data = training )
summary(training$FlyAsh)
qplot(FlyAsh, data = training )
library(caret)
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer)
x <- training$SuperPlasticizer
dim(x)
training$SuperPlasticizer
training
names(training)
x <- training$Superplasticizer
dim(x)
x
hist(x)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
library(caret)
library(rpart)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
library(RColorBrewer)
library(rattle)
install.packages("rattle")
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training <- read.csv(url(trainUrl), na.strings=c("NA","#DIV/0!",""))
testing <- read.csv(url(testUrl), na.strings=c("NA","#DIV/0!",""))
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
myTraining <- training[inTrain, ]
myTesting <- training[-inTrain, ]
dim(myTraining); dim(myTesting)
modFitA1 <- rpart(classe ~ ., data=myTraining, method="class")
fancyRpartPlot(modFitA1)
predictionsA1 <- predict(modFitA1, myTesting, type = "class")
confusionMatrix(predictionsA1, myTesting$classe)
myDataNZV <- nearZeroVar(myTraining, saveMetrics=TRUE)
library(caret)
myDataNZV <- nearZeroVar(myTraining, saveMetrics=TRUE)
myNZVvars <- names(myTraining)  %in%  c("new_window", "kurtosis_roll_belt", "kurtosis_picth_belt", "kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt","max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt", "avg_roll_arm", "stddev_roll_arm", "var_roll_arm", "avg_pitch_arm", "stddev_pitch_arm", "var_pitch_arm", "avg_yaw_arm", "stddev_yaw_arm", "var_yaw_arm", "kurtosis_roll_arm", "kurtosis_picth_arm", "kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm", "max_roll_arm", "min_roll_arm", "min_pitch_arm", "amplitude_roll_arm", "amplitude_pitch_arm", "kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell", "kurtosis_yaw_dumbbell", "skewness_roll_dumbbell", "skewness_pitch_dumbbell", "skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell", "amplitude_yaw_dumbbell", "kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm", "skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm", "max_roll_forearm", "max_yaw_forearm", "min_roll_forearm", "min_yaw_forearm", "amplitude_roll_forearm", "amplitude_yaw_forearm", "avg_roll_forearm", "stddev_roll_forearm", "var_roll_forearm", "avg_pitch_forearm", "stddev_pitch_forearm", "var_pitch_forearm", "avg_yaw_forearm", "stddev_yaw_forearm", "var_yaw_forearm")
myTraining <- myTraining[!myNZVvars]
dim(myTraining)
myTraining <- myTraining[c(-1)]
trainingV3 <- myTraining #creating another subset to iterate in loop
for(i in 1:length(myTraining)) { #for every column in the training dataset
if( sum( is.na( myTraining[, i] ) ) /nrow(myTraining) >= .6 ) { #if n?? NAs > 60% of total observations
for(j in 1:length(trainingV3)) {
if( length( grep(names(myTraining[i]), names(trainingV3)[j]) ) ==1)  { #if the columns are the same:
trainingV3 <- trainingV3[ , -j] #Remove that column
}
}
}
}
dim(trainingV3)
myTraining <- trainingV3
clean1 <- colnames(myTraining)
clean2 <- colnames(myTraining[, -58])
myTesting <- myTesting[clean1]
testing <- testing[clean2]
dim(myTesting)
dim(testing)
for (i in 1:length(testing) ) {
for(j in 1:length(myTraining)) {
if( length( grep(names(myTraining[i]), names(testing)[j]) ) ==1)  {
class(testing[j]) <- class(myTraining[i])
}
}
}
testing <- rbind(myTraining[2, -58] , testing)
testing <- testing[-1,]
modFitA1 <- rpart(classe ~ ., data=myTraining, method="class")
library(rpart)
library(rpart.plot)
library(RColorBrewer)
modFitA1 <- rpart(classe ~ ., data=myTraining, method="class")
predictionsA1 <- predict(modFitA1, myTesting, type = "class")
confusionMatrix(predictionsA1, myTesting$classe)
modFitB1 <- randomForest(classe ~. , data=myTraining)
library(randomForest)
install.packages(randomForest)
library(rattle)
modFitB1 <- randomForest(classe ~. , data=myTraining)
install.packages("randomForest")
library(randomForest)
modFitB1 <- randomForest(classe ~. , data=myTraining)
predictionsB1 <- predict(modFitB1, myTesting, type = "class")
confusionMatrix(predictionsB1, myTesting$classe)
getwd()
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(predictionsB2)
pml_write_files(predictionsB1)
predictionsB2 <- predict(modFitB1, testing, type = "class")
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(predictionsB2)
library(ElemStatLearn)
install.packages(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(ozone,package="ElemStatLearning")
data(ozone)
ozone <- ozone[order(ozone$ozone),]
head(ozone)
ll <- matrix(NA, nro=10, ncol=155)
for (i in 1:10){}
for (i in 1:10){}
for (i in 1:10){
ss=sample(1:dim(ozone)[1],Replace=T)
ozone0 <-ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone, data=ozone0, span = 0.2)
ll[i,] <- predict(loess0, newdata =data.frame(ozone = 1:155))
}
for (i in 1:10){
ss=sample(1:dim(ozone)[1],replace=T)
ozone0 <-ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone, data=ozone0, span = 0.2)
ll[i,] <- predict(loess0, newdata =data.frame(ozone = 1:155))
}
plot(ozone$ozone, ozone$tempeture, pch=19, cex = 0.5)
plot(ozone$ozone, ozone$temperature, pch=19, cex = 0.5)
for(i in 1:10){line(1:155, ll[i,], col = "grey", lwd = 2)}
for(i in 1:10){lines(1:155, ll[i,], col = "grey", lwd = 2)}
lines(1:155, apply(11,2,mean), col="red", lwd=2)
lines(1:155, apply(11,2,mean), col="red", lwd=2)
lines(1:155, apply(11,1:2,mean), col="red", lwd=2)
lines(1:155, apply(ll,1:2,mean), col="red", lwd=2)
lines(1:155, apply(ll,2,mean), col="red", lwd=2)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
x <- data(AppliedPredictiveModeling)
x <- AppliedPredictiveModeling
library(AppliedPredictiveModeling)
AppliedPredictiveModeling
install.packages("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
x <- AppliedpredictiveMode
x <- AppliedpredictiveMode
x <- AppliedpredictiveModeling
x <- AppliedPredictiveModeling
x <- data(segmentationOriginal)
names(x)
head(x)
library(ElemStatLearn)
x <- data(vowel.train)
y <- data(vowel.test)
names(x)
names(y)
data(vowel.test)
data(vowel.train)
set.seed(33833)
rf1 <- randomForest(y ~ ., norm.votes=FALSE)
library(caret)
rf1 <- randomForest(y ~ ., norm.votes=FALSE)
library(randomForest)
rf1 <- randomForest(y ~ ., norm.votes=FALSE)
rf1 <- randomForest(y ~ .,data=data(vowel.test), norm.votes=FALSE)
x <- data(vowel.test)
rf1 <- randomForest(y ~ .,x, norm.votes=FALSE)
rf1 <- randomForest(y ~ .,data(vowel.test), norm.votes=FALSE)
rf1 <- randomForest(y ~ .,data(vowel.test),ntree=50, norm.votes=FALSE)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
rf1 <- randomForest(y ~ ., vowel.train, ntree=50, norm.votes=FALSE)
library(randomFerest)
library(randomForest)
rf1 <- randomForest(y ~ ., vowel.train, ntree=50, norm.votes=FALSE)
rf2 <- randomForest(y ~ ., vowel.test, ntree=50, norm.votes=FALSE)
library(caret)
library(gbm)
install.packages(gdm)
install.packages("gdm")
install.packages("gdm")
install.packages("gdm")
install.packages("devtools")
install.packages("devtools")
library("devtools")
install.packages("Rtools")
install.packages("Rtools")
install_github('slidify','ramnathv')
install_github('slidify','ramnathv/slidify')
install_github('slidify','ramnathv/slidify/slidify')
install.packages("devtools")
library("devtools")
install.packages("Rtools")
pkgs <- c("slidify", "slidifyLibraries", "rCharts")
install_github(pkgs, 'ramnathv', ref = 'dev')
pkgs <- c("rammnathv/lidify", "rammnathv/slidifyLibraries", "rammnathv/rCharts")
install_github(pkgs, 'ramnathv', ref = 'dev')
install_github(pkgs, 'ramnathv', ref = 'dev')
library("devtools")
install.packages("Rtools")
require(devtools)
link = 'http://cran.r-project.org/bin/windows/Rtools/'
find_rtools("C:/Users/Herson/Desktop/Devoping Data Products/Rtools")
find_rtools()
find_rtools()
library("devtools")
library(devtools)
install_github('slidify','ramnathv')
require(devtools)
install_github("slidify", "ramnathv")
install_github("ramnathv/slidify")
install_github("ramnathv/slidifyLibraries")
library(shiny)
library("slidify")
setwd("C:/Users/Herson/Desktop/SlidifyPart")
author("First_slide")
